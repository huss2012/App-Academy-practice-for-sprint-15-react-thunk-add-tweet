{"ast":null,"code":"// constant to avoid debugging typos\nconst GET_ALL_TWEETS = 'tweet/getAllTweets'; //regular action creator\n\nconst loadTweets = tweets => {\n  return {\n    type: GET_ALL_TWEETS,\n    tweets\n  };\n}; // thunk action creator\n\n\nexport const getAllTweets = () => async dispatch => {\n  const response = await fetch('/api/tweets');\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(loadTweets(data));\n    return data;\n  }\n}; //Create an action:\n\nconst POST_A_TWEET = 'tweet/postATweet'; //Create regular action creator:\n\nconst postATweet = message => {\n  return {\n    type: POST_A_TWEET,\n    payLoad: message\n  };\n}; //Create Thunk action creator:\n\n\nconst asyncPostATweet = () => async dispatch => {\n  const response = await fetch('/api/tweets', {\n    method: \"POST\",\n    header: {\n      'Content-Type': 'application/json'\n    }\n  });\n}; // state object\n\n\nconst initialState = {}; // reducer\n\nconst tweetsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_ALL_TWEETS:\n      {\n        const newState = {};\n        action.tweets.forEach(tweet => newState[tweet.id] = tweet);\n        return newState;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default tweetsReducer;","map":{"version":3,"sources":["/home/hussaindominant/App-Acadmy-Projects/practice-for-sprint-15-react-thunk-add-tweet/frontend/src/store/tweet.js"],"names":["GET_ALL_TWEETS","loadTweets","tweets","type","getAllTweets","dispatch","response","fetch","ok","data","json","POST_A_TWEET","postATweet","message","payLoad","asyncPostATweet","method","header","initialState","tweetsReducer","state","action","newState","forEach","tweet","id"],"mappings":"AAAA;AACA,MAAMA,cAAc,GAAG,oBAAvB,C,CAEA;;AACA,MAAMC,UAAU,GAAIC,MAAD,IAAY;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAEH,cADD;AAELE,IAAAA;AAFK,GAAP;AAID,CALD,C,CAOA;;;AACA,OAAO,MAAME,YAAY,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACpD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAD,CAA5B;;AAEA,MAAID,QAAQ,CAACE,EAAb,EAAiB;AACf,UAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AAEAL,IAAAA,QAAQ,CAACJ,UAAU,CAACQ,IAAD,CAAX,CAAR;AACA,WAAOA,IAAP;AACD;AACF,CATM,C,CAWP;;AACA,MAAME,YAAY,GAAG,kBAArB,C,CACA;;AACA,MAAMC,UAAU,GAAIC,OAAD,IAAa;AAC9B,SAAO;AACLV,IAAAA,IAAI,EAAEQ,YADD;AAELG,IAAAA,OAAO,EAAED;AAFJ,GAAP;AAID,CALD,C,CAMA;;;AACA,MAAME,eAAe,GAAG,MAAM,MAAOV,QAAP,IAAoB;AAChD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAD,EAAgB;AAC1CS,IAAAA,MAAM,EAAE,MADkC;AAE1CC,IAAAA,MAAM,EAAE;AAAC,sBAAgB;AAAjB;AAFkC,GAAhB,CAA5B;AAKD,CAND,C,CAQA;;;AACA,MAAMC,YAAY,GAAG,EAArB,C,CAEA;;AACA,MAAMC,aAAa,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AACtD,UAAQA,MAAM,CAAClB,IAAf;AACE,SAAKH,cAAL;AAAqB;AACnB,cAAMsB,QAAQ,GAAG,EAAjB;AACAD,QAAAA,MAAM,CAACnB,MAAP,CAAcqB,OAAd,CAAuBC,KAAD,IAAYF,QAAQ,CAACE,KAAK,CAACC,EAAP,CAAR,GAAqBD,KAAvD;AACA,eAAOF,QAAP;AACD;;AACD;AACE,aAAOF,KAAP;AAPJ;AASD,CAVD;;AAYA,eAAeD,aAAf","sourcesContent":["// constant to avoid debugging typos\nconst GET_ALL_TWEETS = 'tweet/getAllTweets';\n\n//regular action creator\nconst loadTweets = (tweets) => {\n  return {\n    type: GET_ALL_TWEETS,\n    tweets\n  };\n};\n\n// thunk action creator\nexport const getAllTweets = () => async (dispatch) => {\n  const response = await fetch('/api/tweets');\n\n  if (response.ok) {\n    const data = await response.json();\n\n    dispatch(loadTweets(data));\n    return data;\n  }\n};\n\n//Create an action:\nconst POST_A_TWEET = 'tweet/postATweet';\n//Create regular action creator:\nconst postATweet = (message) => {\n  return {\n    type: POST_A_TWEET,\n    payLoad: message\n  }\n};\n//Create Thunk action creator:\nconst asyncPostATweet = () => async (dispatch) => {\n  const response = await fetch('/api/tweets', {\n    method: \"POST\",\n    header: {'Content-Type': 'application/json'}\n,  })\n\n}\n\n// state object\nconst initialState = {};\n\n// reducer\nconst tweetsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ALL_TWEETS: {\n      const newState = {};\n      action.tweets.forEach((tweet) => (newState[tweet.id] = tweet));\n      return newState;\n    }\n    default:\n      return state;\n  }\n};\n\nexport default tweetsReducer;\n"]},"metadata":{},"sourceType":"module"}